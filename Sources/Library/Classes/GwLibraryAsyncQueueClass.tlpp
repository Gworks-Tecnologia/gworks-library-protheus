#include "tlpp-core.th"

#define NPOS_THREAD_NAME 1
#define NPOS_THREAD_COMPLETED 2

using namespace Gworks.Library.Utils
using namespace Gworks.library.Functions

namespace Gworks.Library.Classes

/*/{Protheus.doc} GwAsyncQueue
Classe para execução de filas de processamento de forma assíncrona (multithread).
@type class
@version 12.1.2410
@author Gworks - Giovani
@since 7/2/2025
/*/
Class GwAsyncQueue

    Private Data cProcessName as character
    Private Data oSemaphore as object
    Private Data aQueue as array

    // Métodos construtores da classe
    Public Method New() Constructor

    // Métodos públicos da classe
    Public Method Clear()
    Public Method GetSemaphore() as object
    Public Method Execute( jProcess as json )

    // Métodos privados da classe
    Private Method Init()
    Private Method ValidateProcessStructure( jProcess as json )
    Private Method ValidateRequestStructure( jRequest as json )
    Private Method GetActiveThreads( nRetRunning ) as logical
    Private Method WaitingFinishExecution( nWaitTime as integer )
    Private Method StartThreadAsync()

EndClass

/*/{Protheus.doc} GwAsyncQueue::New
Método construtores da classe.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/2/2025
@return variant, Retorna a instância da classe.
/*/
Method New( cProcessName as character ) Class GwAsyncQueue

    if empty( cProcessName )
        UserException("GwAsyncQueue:New - Process name is required...")
    endif

    ::Init( cProcessName )

Return Self

/*/{Protheus.doc} GwAsyncQueue::Init
Método de incialização da classe.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/2/2025
/*/
Method Init( cProcessName as character ) Class GwAsyncQueue

    ::cProcessName := cProcessName
    ::oSemaphore := GwSemaphore():New()
    ::aQueue := {}

Return

/*/{Protheus.doc} GwAsyncQueue::Clear
Limpa o controle semafórico.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/2/2025
/*/
Method Clear() Class GwAsyncQueue

    ::cLock := ""
    ::oSemaphore:Clear()

    fwFreeVar(::aQueue)
    ::aQueue := {}

Return

/*/{Protheus.doc} GwAsyncQueue::GetSemaphore
Retorna o objeto semafórico.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/7/2025
@return object, Objeto semafórico da classe GwSemaphore().
/*/
Method GetSemaphore() as object Class GwAsyncQueue
Return ::oSemaphore

/*/{Protheus.doc} GwAsyncQueue::ValidateProcessStructure
Método privado para validar a estrutura de jProcess.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/3/2025
@param jProcess, json, Objeto jProcess.
/*/
Method ValidateProcessStructure( jProcess as json ) Class GwAsyncQueue

    Local nI as integer
    Local aNames as array
    Local cNames := "max_threads;"+;
                    "wait_time;"+;
                    "request_list" as character

    aNames := jProcess:GetNames()

    for nI:=1 to len(aNames)

        if!( aNames[nI] $ cNames )
            UserException("GwAsyncQueue:ValidateProcessStructure - Invalid process structure...")
        endif

    next

Return

/*/{Protheus.doc} GwAsyncQueue::ValidateRequestStructure
Método privado para validar a estrutura de jRequest.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/3/2025
@param jRequest, json, Objeto jRequest.
/*/
Method ValidateRequestStructure( jRequest as json ) Class GwAsyncQueue

    Local nI as integer
    Local aNames as array
    Local cNames := "request_id;"+;
                    "request_function;"+;
                    "request_params" as character

    aNames := jRequest:GetNames()
    for nI:=1 to len(aNames)

        if!( aNames[nI] $ cNames )
            UserException("GwAsyncQueue:ValidateRequestStructure - Invalid request structure...")
        endif

    next

Return

/*/{Protheus.doc} GwAsyncQueue::GetActiveThreads
Método privado para verificar se existem threads ativas.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/3/2025
@param nRetRunning, numeric, Retorna por ref. de memória a quant. de threads ativas.
@return logical, Retorna .T. (true) para indicar que existem threads ativas e .F. (false) caso contrário.
/*/
Method GetActiveThreads( nRetRunning as numeric ) as logical Class GwAsyncQueue

    Local nResult as integer
    Local nI as integer
    Local cThreadName as character

    for nI:=1 to len( ::aQueue )

        cThreadName := ::aQueue[ nI ][ NPOS_THREAD_NAME ]

        if ::oSemaphore:Lock( cThreadName )

            ::aQueue[ nI ][ NPOS_THREAD_COMPLETED ] := .T. // define a thread como concluída

            ::oSemaphore:UnLock()

        endif

        if!( ::aQueue[ nI ][ NPOS_THREAD_COMPLETED ] ) // se a thread ainda não foi concluída
            nResult++
        endif

    next

    nRetRunning := nResult

Return( nResult > 0 )

/*/{Protheus.doc} GwAsyncQueue::WaitingFinishExecution
Método interno para aguardar o término de execução de threads remanascentes.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/8/2025
@param nWaitTime, numeric, Tempo de espera em milisegundos.
/*/
Method WaitingFinishExecution( nWaitTime as integer ) Class GwAsyncQueue

    while ::GetActiveThreads()

        sleep(nWaitTime)

    enddo

Return

/*/{Protheus.doc} GwAsyncQueue::StartThreadAsync
Inicia uma thread assíncrona.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/3/2025
@param jRequest, json, Elemento de request_list.
/*/
Method StartThreadAsync( jRequest as json ) Class GwAsyncQueue

    Local nI as integer
    Local aParams := array(24) as array

    Local lWait := .F. as logical
    Local cThreadName := ::cProcessName +":"+ allTrim(str(jRequest["request_id"])) as character
    Local lCompleted := .F. as logical

    if( valType( jRequest["request_params"] ) != "A" )
        jRequest["request_params"] := {}
    endif

    if( len( jRequest["request_params"] ) > 24 )
        UserException("GwAsyncQueue:StartThreadAsync - The request_params must have a maximum of 24 parameters...")
    endif

    for nI:=1 to len(jRequest["request_params"])
        aParams[nI] := jRequest["request_params"][nI]
    next

    lCompleted := .F.
    aAdd( ::aQueue, { cThreadName, lCompleted } ) // adiciona o id da thread e o número do registro no array de fila

    StartJob( ;
        jRequest["request_function"],;
        GetEnvServer(),;
        lWait,;
        cThreadName,;
        aParams[1],;
        aParams[2],;
        aParams[3],;
        aParams[4],;
        aParams[5],;
        aParams[6],;
        aParams[7],;
        aParams[8],;
        aParams[9],;
        aParams[10],;
        aParams[11],;
        aParams[12],;
        aParams[13],;
        aParams[14],;
        aParams[15],;
        aParams[16],;
        aParams[17],;
        aParams[18],;
        aParams[19],;
        aParams[20],;
        aParams[21],;
        aParams[23],;
        aParams[24] ;
    )

    sleep(500)

Return

/*/{Protheus.doc} GwAsyncQueue::Execute
Executa de forma assíncrona uma lista de processos informados via parâmetro.
@type method
@version 12.1.2410
@author Gworks - Giovani
@since 7/3/2025
@param jProcess, json, Estrutura de dados a ser considerada no formato:
    {
        "max_threads": 5,
        "wait_time": 5000,
        "request_list": [
            {
                "request_id": 1,
                "request_function": "U_MinhaFuncao",
                "request_params": [xParam1, xParam2, ..., xParam24]
            }
        ]
    }
@obs
    O controle da fila de execução será realizado via semáforo obedecendo a expressão
    ::cProcessName +":"+ jRequest["request_id"] para cada elemento contido em request_list.
    Portanto, é necessário que a função definida em request_function confirme o controle
    de semáforo para que o monitoramento da fila funcione adequadamente.
/*/
Method Execute( jProcess as json ) Class GwAsyncQueue

    Local nRunning as numeric
    Local nI as integer
    Local aRequest as array
    Local jRequest as json

    ::ValidateProcessStructure( jProcess )

    aRequest := jProcess["request_list"]

    for nI:=1 to len(aRequest)

        jRequest := aRequest[nI]

        ::ValidateRequestStructure( jRequest )

        ::GetActiveThreads( @nRunning )

        if nRunning <= jProcess["max_threads"] // se o número de threads ativas é menor ou igual ao máximo de threads permitidas

            ::StartThreadAsync( jRequest )

        else

            sleep(jProcess["wait_time"]) // aguarda N segundos...

            nI-- // se mantem no mesmo elemento de jRequest

        endif

    next

    ::WaitingFinishExecution( jProcess["wait_time"] )

Return
