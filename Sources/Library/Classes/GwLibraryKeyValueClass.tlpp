#include "TOTVS.ch"
#include "MsObject.ch"

#define CRLF chr(13)+chr(10)
#define CRLF2 CRLF+CRLF

using namespace Gworks.Library.Utils
using namespace Gworks.library.Functions

namespace Gworks.Library.Classes

Class GwKeyValue

    Public Data aKeyValue as array default {}
    Public Data cLastMatch as character default ""
    Public Data cLastMatchType as character default ""
    Public Data nLastMatchPos as numeric default 0

    Public Method New() Constructor
    Public Method Add( cKey as character, xValue as variant )
    Public Method Length() as numeric
    Public Method HasName( cName as character ) as logical
    Public Method HasChildren( nPos as numeric ) as logical
    Public Method GetChildren( nPos as numeric ) as object
    Public Method GetKeyByPosition( nPos as numeric ) as character
    Public Method GetNameByPosition( nPos as numeric ) as character
    Public Method GetAllValues() as array
    Public Method GetValueTypeByPosition( nPos as numeric ) as character
    Public Method GetValueByPosition( nPos as numeric ) as variant
    Public Method GetValueByKey( xSearch as variant ) as variant
    Public Method GetPositionKey( cKey as character ) as numeric
    Public Method KeyExists( cKey as character, cMatch as character ) as logical
    Public Method ValueExists( cValue as character ) as logical
    Public Method ReplaceValueByKey( cKey as character, xValue as variant )
    Public Method AddOrReplaceByKey( cKey as character, xValue as variant )

EndClass


Method New() Class GwKeyValue

    Self:aKeyValue := {}
    Self:cLastMatch := ""
    Self:cLastMatchType := ""
    Self:nLastMatchPos := 0

Return Self


Method Add( cKey as character, xValue as variant ) Class GwKeyValue

    aAdd(::aKeyValue, { cKey, xValue })

Return


Method Length() as numeric Class GwKeyValue

    Local nResult := 0

    nResult := Len(::aKeyValue)

Return nResult


Method HasName( cName as character ) as logical Class GwKeyValue

    Local nPos    := 0   as numeric
    Local lResult := .F. as logical

    Default cName := ""

    nPos := aScan(::aKeyValue, {|x| x[1] == xSearch })

    if nPos > 0
        lResult := .T.
    endif

Return lResult


Method HasChildren( nPos as numeric ) as logical Class GwKeyValue

    Local lResult := .F. as logical

    Default nPos := 1 // vlr. padrão = 1 (mantido por compatibilidade)

    if  ValType(::aKeyValue[nPos,2]) == "O" .And. ;
        AllTrim(Upper(GetClassName(::aKeyValue[1,2]))) == "GWORKS.LIBRARY.CLASSES.GWKEYVALUE"

        lResult := .T.

    endif

    // if ( Len(::aKeyValue) == 1 .And. ;
    //      ValType(::aKeyValue[1,2]) == "O" .And. ;
    //      AllTrim(Upper(GetClassName(::aKeyValue[1,2]))) == "GWORKS.LIBRARY.CLASSES.GWKEYVALUE" )
    //     lResult := .T.
    // endif

Return lResult


Method GetChildren( nPos as numeric ) as object Class GwKeyValue

    Local oResult as object

    Default nPos := 1 // vlr. padrão = 1 (mantido por compatibilidade)

    if ::HasChildren()
        oResult := ::aKeyValue[nPos,2]
    endif

Return oResult


Method GetKeyByPosition( nPos as numeric ) as character Class GwKeyValue

    Local cResult := "" as character

    Default nPos := 0

    if nPos > 0
        cResult := ::aKeyValue[nPos,1]
    endif

Return cResult


Method GetNameByPosition( nPos as numeric ) as character Class GwKeyValue
Return ::GetKeyByPosition(nPos)


Method GetAllValues() as array Class GwKeyValue

    Local aKeyValue := {} as array

    aKeyValue := aClone(::aKeyValue)

Return aKeyValue


Method GetValueTypeByPosition( nPos as numeric ) as character Class GwKeyValue

    Local xValue  := nil as variant
    Local cResult := ""  as character

    xValue := ::GetValueByPosition(nPos)

    cResult := ValType(xValue)

Return cResult


Method GetValueByPosition( nPos as numeric ) as variant Class GwKeyValue // TODO: testar...

    Local xResult := nil as variant

    Default nPos := 0

    if nPos > 0
        xResult := ::aKeyValue[nPos,2]
    endif

Return xResult


Method GetValueByKey( xSearch as variant, cMatch as character, cMatchType as character ) as variant Class GwKeyValue

    Local nPos         := 0   as numeric
    Local xResult      := nil as variant

    Default xSearch    := nil
    Default cMatch     := ""
    Default cMatchType := ""

    if Empty(xSearch)
        UserException("GwKeyValue:GetValueByKey - Parâmetro xSearch inválido ou não informado!")
    endif

    if !Empty(cMatch) .And. !Empty(cMatchType) .And. cMatch == ::cLastMatch .And. cMatchType == ::cLastMatchType
        nPos := ::nLastMatchPos
    else
        nPos := aScan(::aKeyValue, {|x| x[1] == xSearch })
    endif

    if nPos > 0
        xResult := ::aKeyValue[nPos,2]
    endif

Return xResult


Method GetPositionKey( cKey as character ) as numeric Class GwKeyValue

    Local nPos := 0 as numeric

    Default cKey := ""

    if Empty(cKey)
        UserException("GwKeyValue:GetPositionKey - Parâmetro cKey inválido ou não informado!")
    endif

    nPos := aScan(::aKeyValue, {|x| x[1] == cKey })

Return nPos


Method KeyExists( cKey as character, cMatch as character, cMatchType as character ) as logical Class GwKeyValue

    Local nPos           := 0   as numeric
    Local nStart         := 0   as numeric
    Local nMatchPos      := 0   as numeric
    Local lResult        := .F. as logical

    Default cKey         := ""
    Default cMatch       := ""
    Default cMatchType   := "key"

    if Empty(cKey)
        UserException("GwKeyValue:KeyExists - Parâmetro cKey inválido ou não informado!")
    endif

    if !Empty(cMatch)

        do case
            case Lower(cMatchType) == "key"   ; nMatchPos := 1
            case Lower(cMatchType) == "value" ; nMatchPos := 2
            otherwise
                UserException("GwKeyValue:KeyExists - Parâmetro cMatchType inválido ou não informado!")
        endcase

        nStart := 1
        while .T.
            nPos := aScan(::aKeyValue, {|x| x[1] == cKey }, nStart)
            if nPos > 0
                if ( cMatch $ ::aKeyValue[nPos,nMatchPos] )
                    lResult := .T.
                    exit
                else
                    nStart := nPos+1
                    loop
                endif
            else
                exit
            endif
        enddo

    else
        lResult := ( ( nPos := aScan( ::aKeyValue, {|x| x[1] == cKey } ) ) > 0 )
    endif

    if lResult
        ::cLastMatch := cMatch
        ::cLastMatchType := cMatchType
        ::nLastMatchPos := nPos
    else
        ::cLastMatch := ""
        ::cLastMatchType := ""
        ::nLastMatchPos := 0
    endif

Return lResult


Method ValueExists( cValue as character ) as logical Class GwKeyValue

    Local lResult := .F. as logical

    if Empty(cValue)
        UserException("GwKeyValue:ValueExists - Parâmetro cValue inválido ou não informado!")
    endif

    lResult := ( aScan(::aKeyValue, {|x| x[2] == cValue }) > 0 )

Return lResult


Method ReplaceValueByKey( cKey as character, xValue as variant ) Class GwKeyValue

    Local nPos    := 0   as numeric
    Local lResult := .F. as logical

    Default cKey := nil
    Default xValue := nil

    if Empty(cKey)
        UserException("GwKeyValue:ReplaceValueByKey - Parâmetro cKey inválido ou não informado!")
    endif

    nPos := aScan(::aKeyValue, {|x| x[1] == cKey })

    if nPos > 0
        ::aKeyValue[nPos,2] := xValue
        lRessult := .T.
    endif

Return lResult


Method AddOrReplaceByKey( cKey as character, xValue as variant ) Class GwKeyValue

    Local lResult := .F. as logical

    Default cKey := nil
    Default xValue := nil

    if Empty(cKey)
        UserException("AddOrReplaceByKey:ReplaceValueByKey - Parâmetro cKey inválido ou não informado!")
    endif

    if ::KeyExists(cKey)
        lResult := ::ReplaceValueByKey(cKey, xValue)
    else
        ::Add(cKey, xValue)
        lResult := .T.
    endif

Return lResult
