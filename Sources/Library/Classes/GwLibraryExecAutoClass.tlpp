#include "TOTVS.ch"
#include "MsObject.ch"
#include "TLPP-Core.th"
#include "TLPP-Object.th"

using namespace Gworks.Library.Utils
using namespace Gworks.library.Functions

namespace Gworks.Library.Classes

/*/{Protheus.doc} GwExecAuto
Classe para execução dinâmica de ExecAutos e com tratamento automático de erro.
@type class
@author Gwroks-Giovani
@since 4/3/2023
@since 4/3/2023
/*/
Class GwExecAuto

    // Controle de erro
    Public data oError as object

    // Atributos do negócio
    Public Data cExecAuto   as character default ""
    Public Data lRunAsJob   as logical default .F.
    Public Data cJobEmpresa as character default ""
    Public Data cJobFilial  as character default ""
    Public Data cJobModule  as character default ""
    Public Data cJobName    as character default ""
    Public Data aJobTables  as array default {}

    Public Data cSuccessExpression       as character default ""
    Public Data cSuccessExpressionResult as character default ""

    // Atributos de controle
    Public Data lResult            as logical default .F.

    // Método construtor
    Public Method New() Constructor

    // Métodos públicos
    Public Method SetSuccessExpression( cExpression as character )
    Public Method GetSuccessExpressionResult() as character
    Public Method SetStartJob( cJobEmpresa as character, cJobFilial as character, cJobModule as character, cJobName as character, aJobTables as array )
    Public Method RunExecAuto( nOperation as numeric, aKeyValue as array ) as logical

EndClass

/*/{Protheus.doc} GwExecAuto::New
Método construtor da classe.
@type method
@version 12.1.33
@author Gwroks-Giovani
@since 4/3/2023
@param cExecAuto, character, Nome do execauto desejado.
@return object, Retorna instância do object criado.
/*/
Method New( cExecAuto as character ) Class GwExecAuto

    Default cExecAuto := ""

    ::oError := GwError():New()
    ::oError:cFunName := "GwExecAuto"
    ::oError:cMethod := "New"
    if Empty(cExecAuto)
        ::oError:cError := "Parâmetro cExecAuto não informado ou inválido!"
        ::oError:ThrowException()
    endif

    ::oError := GwError():New()

    ::cExecAuto   := cExecAuto
    ::lRunAsJob   := .F.
    ::cJobEmpresa := ""
    ::cJobFilial  := ""
    ::cJobModule  := ""
    ::cJobName    := ""
    ::aJobTables  := {}

Return Self

/*/{Protheus.doc} GwExecAuto::SetSuccessExpression
Define a expressão que será executada para retorno em caso de sucesso.
@type method
@version 12.1.33
@author Gwroks-Giovani
@since 4/26/2023
@param cSuccessExpression, character, Expresão (sintaxe advpl).
/*/
Method SetSuccessExpression( cExpression as character ) Class GwExecAuto

    ::cSuccessExpression := cExpression

Return

/*/{Protheus.doc} GwExecAuto::GetSuccessExpressionResult
Retorna a expressão definida em Self:cSuccessExpression.
@type method
@version 12.1.33
@author Gwroks-Giovani
@since 4/26/2023
@Retun character, Conteúdo da expressão.
/*/
Method GetSuccessExpressionResult() Class GwExecAuto

Return ::cSuccessExpressionResult

/*/{Protheus.doc} GwExecAuto::SetStartJob
Método para iniciarlizar os atributos de execução por meio da função StartJob().
@type method
@version 12.1.33
@author Gwroks-Giovani
@since 4/25/2023
@param cJobEmpresa, character, Empresa.
@param cJobFilial, character, Filial.
@param cJobModule, character, Módulo.
@param cJobName, character, Nome do Job a ser exibido pela função FunName() (opcional).
@param aJobTables, array, Lista de tabelas (opcional).
/*/
Method SetStartJob( cJobEmpresa as character, cJobFilial as character, cJobModule as character, cJobName as character, aJobTables as array ) Class GwExecAuto

    Default cJobEmpresa := ""
    Default cJobFilial  := ""
    Default cJobModule  := ""
    Default cJobName    := FunName()
    Default aJobTables  := {}

    ::lRunAsJob   := .F.
    ::cJobEmpresa := ""
    ::cJobFilial  := ""
    ::cJobModule  := ""
    ::cJobName    := ""
    ::aJobTables  := {}

    if !Empty(cJobEmpresa) ;
        .And. !Empty(cJobFilial) ;
        .And. !Empty(cJobModule) ;
        .And. ( CEMPANT != cJobEmpresa .Or. CFILANT != cJobFilial )

        ::lRunAsJob   := .T.
        ::cJobEmpresa := cJobEmpresa
        ::cJobFilial  := cJobFilial
        ::cJobModule  := cJobModule
        ::cJobName    := cJobName
        ::aJobTables  := aJobTables

    endif

Return

/*/{Protheus.doc} GwExecAuto::RunExecAuto( nOperation as numeric, aKeyValue as array ) as logical
Método para executar ExecAutos de maneira dinâmica.
@type method
@version 12.1.33
@author Gwroks-Giovani
@since 4/3/2023
@return logical, Retorna .T. para sucesso e .F. para falhas na execução.
/*/
Method RunExecAuto( nOperation as numeric, aKeyValue as array ) as logical Class GwExecAuto

    Local nI            := 0    as numeric
    Local nY            := 0    as numeric

    Local aData         := {}   as array
    Local aChildren     := {}   as array
    Local lChildren     := .F.  as logical
    Local cField        := ""   as character
    Local xValue        := nil  as variant

    Default cExecAuto   := ""
    Default nOperation  := 0

    ::oError:cMethod := "RunExecAuto"

    if Empty(nOperation) .Or. Empty(aKeyValue)
        ::oError:cError := "Parâmetros não informados ou inválidos!"
        ::oError:ThrowException()
    endif

    for nI:=1 to Len(aKeyValue)

        aChildren := {}
        lChildren := .F.

        aAdd( aData, {} )

        oKeyValue := aKeyValue[nI]

        // Verifica se o objeto possui elementos filhos (itens)
        while oKeyValue:HasChildren()
            oKeyValue := oKeyValue:GetChildren()
            lChildren := .T.
        enddo

        // Processa os elementos do objeto
        for nY:=1 to oKeyValue:Length()
            cField := oKeyValue:GetNameByPosition(nY)
            xValue := oKeyValue:GetValueByPosition(nY)
            if !lChildren
                aAdd( aData[nI], { cField, xValue, nil } )
            else
                aAdd( aChildren, { cField, xValue, nil } )
            endif
        next

        // Adicionar os elementos filhos
        if lChildren
            aAdd( aData[nI], aChildren )
        endif

    next

    if Empty(aData)
        ::oError:cError := "Sem dados a processar!"
        ::oError:ThrowException()
    endif

    if ::lRunAsJob
        cResult := StartJob( "Gworks.Library.Utils.U_GwRunExecAuto", ;
            GetEnvServer(), .T., aData, nOperation, ::cExecAuto, ::cSuccessExpression, ::lRunAsJob, ::cJobEmpresa, ::cJobFilial, ::cJobModule, ::cJobName, ::aJobTables )
    else
        cResult := Gworks.Library.Utils.U_GwRunExecAuto( aData, nOperation, ::cExecAuto, ::cSuccessExpression )
    endif

    if 'SUCCESS' $ cResult

        if ":" $ cResult

            ::cSuccessExpressionResult := StrToKarr(cResult,":")[2]

        endif

        ::lResult := .T.

    else
        ::oError:DefineWithError(.T.)
        ::oError:SetAutoGRLog(cResult)
        ::lResult := .F.
    endif

Return ::lResult
