#include "tlpp-core.th"

using namespace Gworks.Library.Classes
using namespace Global.Projects.ImportacaoBI.Enum

namespace Global.Projects.ImportacaoBI.Controllers

/*/{Protheus.doc} GwDBConnect
Classe para conexão com banco de dados.
@type class
@version 12.1.2310
@author Gworks - Giovani Soares
@since 5/13/2024
@obs Os respectivos bancos de dados precisam estar devidamente configurados no TOTVS DBAccess.
/*/
Class GwDBConnect

    Public Data cDbType as character
    Public Data cDbAlias as character
    Public Data cDbServer as character
    Public Data nDbPort as numeric
    Public Data lConnected as logical

    Public Data nHandle as numeric

    Public Method New() Constructor
    Public Method SetConnection(cDbType, cDbAlias, cDbServer, nDbPort)
    Public Method OpenConnect() as logical
    Public Method Disconnect() as logical

    Private Method Init()

EndClass

/*/{Protheus.doc} GwDBConnect::New
Método construtor da classe.
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 5/13/2024
@return object, instância do objeto.
/*/
Method New() Class GwDBConnect

    ::Init()

Return Self

/*/{Protheus.doc} GwDBConnect::Init
Inicializa atributos da classe.
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 5/13/2024
/*/
Method Init() Class GwDBConnect

    ::cDbType := ""
    ::cDbAlias := ""
    ::cDbServer := "Localhost"
    ::nDbPort := 7890
    ::lConnected := .F.
    ::nHandle := 0

Return

/*/{Protheus.doc} GwDBConnect::SetConnection
Define a conexão a ser realizada.
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 5/13/2024
@param _cDbType, character,
    Tipo do Banco de Dados, entre:
        - ORACLE
        - POSTGRES
        - MSSQL
@param _cDbAlias, character, Nome da conexão, conforme definido no DBAccess.
@param _cDbServer, character, IP ou Hostname do servidor DBAccess.
@param _nDbPort, numeric, Número correspondente à porta de conexão com o DBAccess.
/*/
Method SetConnection( _cDbType as character, _cDbAlias as character, _cDbServer as character, _nDbPort as numeric ) Class GwDBConnect

    ::cDbType := _cDbType
    ::cDbAlias := _cDbAlias
    ::cDbServer := iif(!empty(_cDbServer), _cDbServer, ::cDbServer)
    ::nDbPort := iif(!empty(_nDbPort), _nDbPort, ::nDbPort)

Return

/*/{Protheus.doc} GwDBConnect::OpenConnect() as logical
Conecta com o banco de dados configurado conforme método ::SetConnection().
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 5/13/2024
@return logical, Retorna 'true' para sucesso e 'false' para falha na conexão.
/*/
Method OpenConnect() as logical Class GwDBConnect

    Local cStrConn as character

    Local lResult := .F. as logical

    ::Disconnect()

    if !empty(::cDbType) .And. !empty(::cDbAlias) .And. !empty(::cDbServer) .And. !empty(::nDbPort)

        cStrConn := ::cDbType +'/'+ ::cDbAlias

        ::nHandle := TCLink(cStrConn, ::cDbServer, ::nDbPort)

        if ::nHandle < 0

            ::Disconnect()

        else

            ::lConnected := .T.

            lResult := .T.

        endif

    endif

Return lResult

/*/{Protheus.doc} GwDBConnect::Disconnect() as logical
Desconecta do Banco de Dados atualmente conectado.
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 5/13/2024
@return logical, Retorna 'true' para sucesso e 'false' para falha na conexão.
/*/
Method Disconnect( nHandle as variant, lVerbose as logical ) as logical Class GwDBConnect

    // Indica o número da conexão que será finalizada,
    // se não for informado, a conexão ativa/atual será encerrada.
    Default nHandle := nil

    // Se .T., mostra mensagens de advertência do log de console,
    // como por exemplo fechamento automático de alias da conexão.
    Default lVerbose := .F.

    if ::lConnected

        TcUnLink(nHandle, lVerbose)

    endif

Return
