#include "tlpp-core.th"

using namespace Gworks.Library.Classes
using namespace Global.Projects.ImportacaoBI.Enum

namespace Global.Projects.ImportacaoBI.Controllers

/*/{Protheus.doc} GwDBConnect
Classe para conexão com banco de dados.
@type class
@version 12.1.2310
@author Gworks-Giovani
@since 5/13/2024
@obs Os respectivos bancos de dados precisam estar devidamente configurados no TOTVS DBAccess.
/*/
Class GwDBConnect

    Public Data cDbType as character
    Public Data cDbAlias as character
    Public Data cDbServer as character
    Public Data nDbPort as numeric
    Public Data lConnected as logical

    Public Data nTcLinkResult as numeric

    Public Method New() Constructor
    Public Method SetConn(cDbType, cDbAlias, cDbServer, nDbPort)
    Public Method ClearConn()
    Public Method Connect() as logical
    Public Method Disconnect() as logical

    Private Method Init()

EndClass

/*/{Protheus.doc} GwDBConnect::New
Método construtor da classe.
@type method
@version 12.1.2310
@author Gworks-Giovani
@since 5/13/2024
@return object, instância do objeto.
/*/
Method New() Class GwDBConnect

    ::Init()

Return Self

/*/{Protheus.doc} GwDBConnect::Init
Inicializa atributos da classe.
@type method
@version 12.1.2310
@author Gworks-Giovani
@since 5/13/2024
/*/
Method Init() Class GwDBConnect

    ::cDbType := ""
    ::cDbAlias := ""
    ::cDbServer := "Localhost"
    ::nDbPort := 7890
    ::lConnected := .F.

Return

/*/{Protheus.doc} GwDBConnect::SetConn
Define a conexão a ser realizada.
@type method
@version 12.1.2310
@author Gworks-Giovani
@since 5/13/2024
@param _cDbType, character,
    Tipo do Banco de Dados, entre:
        - ORACLE
        - POSTGRES
        - MSSQL
@param _cDbAlias, character, Nome da conexão, conforme definido no DBAccess.
@param _cDbServer, character, IP ou Hostname do servidor DBAccess.
@param _nDbPort, numeric, Número correspondente à porta de conexão com o DBAccess.
/*/
Method SetConn( _cDbType as character, _cDbAlias as character, _cDbServer, _nDbPort as numeric ) Class GwDBConnect

    ::cDbType := _cDbType
    ::cDbAlias := _cDbAlias
    ::cDbServer := iif(!empty(_cDbServer), _cDbServer, ::cDbServer)
    ::nDbPort := iif(!empty(_nDbPort), _nDbPort, ::nDbPort)

Return

/*/{Protheus.doc} GwDBConnect::ClearConn
Remove configuração de conexão realizada previamente.
@type method
@version 12.1.2310
@author Gworks-Giovani
@since 5/13/2024
/*/
Method ClearConn() Class GwDBConnect

    if !::lConnected
        ::Disconnect()
    endif

    ::Init()

Return

/*/{Protheus.doc} GwDBConnect::Connect() as logical
Conecta com o banco de dados configurado conforme método ::SetConn().
@type method
@version 12.1.2310
@author Gworks-Giovani
@since 5/13/2024
@return logical, Retorna 'true' para sucesso e 'false' para falha na conexão.
/*/
Method Connect() as logical Class GwDBConnect

    Local cStrConn as character

    Local lResult := .F. as logical

    if !empty(::cDbType) .And. !empty(::cDbAlias) .And. !empty(::cDbServer) .And. !empty(::nDbPort)

        cStrConn := ::cDbType +'/'+ ::cDbAlias

        ::nTcLinkResult := TCLink(cStrConn, ::cDbServer, ::nDbPort)

        if ::nTcLinkResult < 0
            TcUnLink()
        else
            ::lConnected := .T.
            lResult := .T.
        endif

    endif

Return lResult

/*/{Protheus.doc} GwDBConnect::Disconnect() as logical
Desconecta com o Banco de Dados previamente conectado.
@type method
@version 12.1.2310
@author Gworks-Giovani
@since 5/13/2024
@return logical, Retorna 'true' para sucesso e 'false' para falha na conexão.
/*/
Method Disconnect() as logical Class GwDBConnect

    if ::lConnected
        TcUnLink()
    endif

Return

