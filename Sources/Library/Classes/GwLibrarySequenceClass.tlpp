#include "TOTVS.ch"
#include "MsObject.ch"

using namespace Gworks.Library.Utils
using namespace Gworks.library.Functions

namespace Gworks.Library.Classes

/*/{Protheus.doc} GwSequence
Classe para numeração sequêncial.
@type class
@version 12.1.2310
@author Gworks - Giovani Soares
@since 6/20/2024
/*/
Class GwSequence

    /*
    Important:
        - Public....: métodos/atributos disponíveis em qualquer lugar
        - Private...: métodos/atributos disponíveis apenas dentro da classe
        - Protected.: métodos/atributos extendidos à classes herdadas desta
    */

    Protected Data aArea as array default {}
    Protected Data nLenCampo as numeric default 0
    Protected Data nLenPrefixo as numeric default 0
    Protected Data nLenFamilia as numeric default 0
    Protected Data nLenSequen as numeric default 0
    Protected Data cSequen as character default ""
    Protected Data cTypeCampo as character default ""

    Protected Data cCampo as character default ""
    Protected Data cPrefixo as character default ""
    Protected Data cFamilia as character default ""
    Protected Data lReboot as logical default .T.

    // Construtor
    Public Method New() Constructor

    // Métodos públicos da classe
    Public Method GetSequence() as character

    // Métodos privados da classe
    Private Method StartSequence() as logical
    Private Method IncrementSequence(_lInclui) as character
    Private Method GetDBSequence( _cCampo, _cPrefixo, _nTamCampo ) as character
    Private Method GetFieldStruct( _cCampo ) as numeric
    Private Method CommitSequence( _cSequen )

EndClass

/*/{Protheus.doc} GWSequence::New
Cria instância da classe.
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 6/20/2024
@param _cArgCampo, character, Nome do Campo conforme dicionário SX3 para geração do nro. sequêncial (obrigatório).
@param _cPrefixo, character, Prefixo a ser anexado ao código sequêncial.
@param _cFamilia, character, Se informado, permite diversas sequências para um mesmo campo.
@param _lReboot, logical,
@return variant, Instância do objeto.
/*/
Method New( _cCampo as character, _cPrefixo as character, _cFamilia as character, _lReboot as logical ) Class GWSequence

    Default _cCampo := ""
    Default _cPrefixo := Space(nLenPrefixo)
    Default _cFamilia := Space(nLenFamilia) // nome da familia do campo
    Default _lReboot := .T. // atualiza o controle sequêncial com base no banco de dados

    ::nLenCampo := TamSx3( "ZGS_CAMPO" )[1]
    ::nLenPrefixo := TamSx3( "ZGS_PREFIX" )[1]
    ::nLenFamilia := TamSx3( "ZGS_FAMI" )[1]
    ::nLenSequen := TamSx3( "ZGS_SEQUEN" )[1]
    ::cSequen := ""

    ::cCampo := _cCampo
    ::cPrefixo := _cPrefixo
    ::cFamilia := _cFamilia
    ::lReboot := _lReboot

    if Empty(::cCampo)
        UserException("GWSequence:New - invalid parameters!")
    endif

    ::cCampo   := PadR( ::cCampo  , ::nLenCampo  , " " )
    ::cPrefixo := PadR( ::cPrefixo, ::nLenPrefixo, " " )
    ::cFamilia := PadR( ::cFamilia, ::nLenFamilia, " " )
    ::cSequen  := PadR( ::cSequen , ::nLenSequen , " " )

    ::GetFieldStruct()

    if( ::cTypeCampo == "N" .And. allTrim(::cPrefixo) > "" )
        UserException("GWSequence:New - prefix not compatible with numeric fields")
    endif

Return Self

/*/{Protheus.doc} GWSequence::GetSequence
Obtem a sequência correspondente aos parâmetros de construção do objeto.
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 6/20/2024
@return character, Numeração sequêncial.
/*/
Method GetSequence() Class GWSequence as character

    Local xResult as variant
    Local lFound := .F. as logical

    ::aArea := GetArea()

    DbSelectArea("ZGS")
    ZGS->(DbSetOrder(1)) // ZGS_FILIAL+ZGS_FAMI+ZGS_CAMPO+ZGS_PREFIX
    ZGS->(DbGoTop())
    if ZGS->(MsSeek(xFilial("ZGS")+::cFamilia+::cCampo+::cPrefixo))
        lFound := .T.
    endif

    BEGIN TRANSACTION

        do case

            case lFound

                ::cSequen := ::IncrementSequence(.F.)

            case !lFound .And. ::StartSequence()

                ::cSequen := ::IncrementSequence(.T.)

            otherwise
                UserException("GWSequence:GetSequence - fault for generate sequential for field " + ::cCampo)

        endcase

    END TRANSACTION

    do case
        case ::cTypeCampo == "N"  ; xResult := val(::cSequen)
        case ::cTypeCampo == "C"  ; xResult := ::cSequen
    endcase

    RestArea(::aArea)

Return xResult

/*/{Protheus.doc} GWSequence::StartSequence
Método interno para inicializar uma numeração se a mesma não existir.
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 6/20/2024
@return logical, Retorna 'true' para indicar sucesso e 'false' caso contrário.
/*/
Method StartSequence() Class GWSequence as logical

    Local cPrefixo  := ""  as character

    if ::nLenCampo <= 0
        Return .F.
    endif

    RecLock("ZGS",.T.)

        ZGS->ZGS_FILIAL := xFilial("ZGS")
        ZGS->ZGS_FAMI := ::cFamilia
        ZGS->ZGS_CAMPO := ::cCampo
        ZGS->ZGS_PREFIX := ::cPrefixo
        ZGS->ZGS_TIPO := ::cTypeCampo
        cPrefixo := AllTrim(::cPrefixo)

        if ::lReboot
            ZGS->ZGS_SEQUEN := ::GetDBSequence(::cCampo, ::cPrefixo, ::nLenCampo)
        else
            ZGS->ZGS_SEQUEN := cPrefixo+StrZero(1,::nLenCampo-Len(cPrefixo))
        endif

    ZGS->(MsUnLock())

Return .T.

/*/{Protheus.doc} GWSequence::IncrementSequence
Incrementa sequêncial.
@type method
@version 12.1.2310
@author Gworks - Giovani Soares
@since 6/20/2024
@param _lInclui, logical, Se 'true' indica que o sequêncial recém gerado/incluído, será utilizado sem a necessidade de incremento com o Soma1().
@return character, Squencial resultante.
/*/
Method IncrementSequence( _lInclui ) Class GWSequence as character
    Default _lInclui := .F.
    Local cResult := "" as character
    Local cPrefixo := "" as character
    Local cSequence := "" as character
    Local lLock := .F. as logical
    while !lLock
        cPrefixo  := AllTrim(ZGS->ZGS_PREFIX)
        cSequence := AllTrim(Replace(ZGS->ZGS_SEQUEN,cPrefixo,""))
        do case
            case !_lInclui ; cResult := cPrefixo + Soma1(cSequence)
            case  _lInclui ; cResult := cPrefixo + cSequence
        endcase
        if LockByName(cResult,.T.,.T.)
            ::CommitSequence(cResult)
            UnLockByname(cResult,.T.,.T.)
            lLock := .T.
        else
            sleep(100)
        endif
    enddo
Return cResult

/*/{Protheus.doc} GWSequence::GetDBSequence
Métodfo interno para obter o último número utilizado no Banco de Dados.
@type method
@version 12.1.2310
@author Gweorks - Giovani
@since 6/20/2024
@param _cCampo, character, Nome do campo desejado.
@param _cPrefixo, character, Prefixo.
@param _nTamCampo, numeric, Tamanho do campo.
@return character, Numeração conforme Banco de Dados.
/*/
Method GetDBSequence( _cCampo, _cPrefixo, _nTamCampo ) Class GWSequence as character // nao considera a familia

    Local cAlias := "" as character
    Local cTable := "" as character
    Local cFilSQL := "" as character
    Local cPrxFil := "" as character
    Local cFieldSQL := "" as character
    Local cTableSQL := "" as character
    Local cWhereSQL := "" as character
    Local cMaxSqlSeq := "" as character
    Local cResult := "" as character

    Default _cCampo := ""
    Default _cPrefixo := ""

    if Empty(_cCampo) .Or. Empty(_nTamCampo)
        Return ""
    endif

    _cCampo := AllTrim(_cCampo)
    _cPrefixo := AllTrim(_cPrefixo)

    U_GwOpenDictionary("SX3","SX3DIC")
    DbSelectArea("SX3DIC")
    SX3DIC->(DbSetOrder(2))
    SX3DIC->(DbGoTop())
    if !SX3DIC->(MsSeek(Upper(_cCampo)))
        Return ""
    endif

    cTable := SX3DIC->X3_ARQUIVO
    cPrxFil := Upper(cTable)
    cPrxFil := if(SubStr(cPrxFil,1,1) == "S", SubStr(cPrxFil,2,2), cPrxFil)
    cFilSQL := cPrxFil + "_FILIAL"

    cFieldSQL := "%MAX(" + _cCampo + ") %"
    cTableSQL := "%"+RetSqlName(cTable)+"%"
    cWhereSQL += "%TBL." + cFilSQL + " = '" + xFilial(cTable) + "' AND "
    cWhereSQL += if(!Empty(_cPrefixo), "TBL." + _cCampo + " LIKE '" + Upper(_cPrefixo) + "%' AND ", "")
    cWhereSQL += "TBL.D_E_L_E_T_ = ' ' %"
    cAlias := GetNextAlias()
    BeginSQL Alias cAlias
        SELECT
            %exp:cFieldSQL% as MAXSEQ
        FROM
            %exp:cTableSQL% TBL
        WHERE
            %exp:cWhereSQL%
    EndSQL

    DbSelectArea(cAlias)

    if !(cAlias)->(EOF()) .And. !Empty((cAlias)->MAXSEQ)
        if ::cTypeCampo == "N"
            cMaxSqlSeq := cValToChar((cAlias)->MAXSEQ)
        else
            cMaxSqlSeq := (cAlias)->MAXSEQ
        endif
        cResult := Replace( cMaxSqlSeq, _cPrefixo )
        cResult := Soma1(cResult)
        cResult := _cPrefixo+cResult
    else
        cResult := _cPrefixo+StrZero(1,_nTamCampo-Len(_cPrefixo))
    endif

    (cAlias)->(DbCloseArea())

Return cResult

/*/{Protheus.doc} GWSequence::GetFieldStruct
Método interno para obter o tamanho do campo informado para geração sequêncial.
@type method
@version 12.1.2310
@author Gweorks - Giovani
@since 6/20/2024
/*/
Method GetFieldStruct() Class GWSequence as numeric
    Local aStruct := {} as array
    aStruct := TamSx3(::cCampo)
    ::nLenCampo := aStruct[1]
    ::cTypeCampo := aStruct[3]
    if !(::cTypeCampo $ "C/N") .Or. aStruct[2] > 0
        UserException("GWSequence:GetFieldStruct - invalid data type!")
    endif
Return

/*/{Protheus.doc} GWSequence::CommitSequence
Método interno para salvar/confirmar a numeração sequêncial.
@type method
@version 12.1.2310
@author giovani
@since 6/20/2024
/*/
Method CommitSequence(_cSequen as character) Class GWSequence
    RecLock("ZGS",.F.)
        ZGS->ZGS_SEQUEN := AllTrim(_cSequen)
    ZGS->(MsUnLock())
Return
