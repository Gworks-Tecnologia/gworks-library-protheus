#include "TOTVS.ch"
#include "FWMVCDef.ch"
#include "MsObject.ch"

#define REQUIRE_DATASOURCE_RELATION   "SX2/DIC"
#define REQUIRE_DATASOURCE_DICTIONARY "SX2/DIC"
#define REQUIRE_DATASOURCE_DBQUERY    "SQL"

using namespace Gworks.Library.Utils
using namespace Gworks.library.Functions

namespace Gworks.Library.Classes

Class GwDataAccess

    // Atributos de controle de erro
    Public Data oError       as object    default nil

    // Atributos descritivos auxiliares
    Public Data cDescription as character default ""
    Public Data cSourceModel as character default ""
    Public Data cSourceView  as character default ""
    Public Data cSourceMenu  as character default ""

    // Atributos principais
    Public Data cAlias       as character default ""
    Public Data cDataSource  as character default ""
    Public Data aQuery       as array     default {}
    Public Data aInsert      as array     default {}
    Public Data aUpdate      as array     default {}
    Public Data aDelete      as array     default {}
    Public Data lOpened      as logical   default .F.
    Public Data nRecnoId     as numeric   default 0
    Public Data nOperation   as numeric   default 0

    // Atributos de controle de área
    Public Data aAliasArea   as array     default {}
    Public Data aOtherAreas  as array     default {}
    Public Data cOtherAreas  as character default {}

    // Atributos de controle de relacionamento com demais entidades
    Public Data cAliasFrom   as character default ""
    Public Data cAliasJoin   as character default ""
    Public Data cIndexFrom   as character default ""
    Public Data cKeyFrom     as character default ""
    Public Data cIndexJoinFK as character default ""
    Public Data cIndexJoinPK as character default ""
    Public Data aRelation    as array     default {}
    Public Data oRelation    as object    default nil
    Public Data lRelation    as logical   default .F.

    // Atributos de manipulação de índices
    Public Data nIndexOrd    as numeric   default 0
    Public Data cIndexKey    as character default ""
    Public Data lAutoFilial  as logical   default .T.
    Public Data lFound       as logical   default .F.

    // Construtore(s)
    Public Method New() Constructor

    // Métodos para tratativa de erro
    Public Method GetErrorObject() as variant

    // Demais
    Public Method SetDataSource( cDataSource as character ) as variant

    // Métodos para manipulação de área
    Public Method SelectArea() as variant
    Public Method SaveArea() as variant
    Public Method SaveOtherAreas( cNames as character )
    Public Method RestoreArea() as variant
    Public Method RestoreOtherAreas( cNames as character ) as variant
    Public Method EraseArea() as variant
    Public Method EraseOtherAreas() as variant
    Public Method CloseArea() as variant
    Public Method ReleaseArea() as variant

    // Métodos para busca, definição de ordem e manipulação de posição
    Public Method SetOrder( xOrder as variant )
    Public Method RetIndexOrder() as numeric
    Public Method GoTop() as variant
    Public Method GoBottom() as variant
    Public Method GoToRecno( nRecno as numeric ) as logical
    Public Method SkipLine() as variant
    Public Method EnableAutoFilial() as variant
    Public Method DisableAutoFilial() as variant
    Public Method SeekStatus( cKey as character ) as logical
    Public Method Seek( cKey as character ) as logical
    Public Method EvalByCondition( bExec as codeblock, bCondition as codeblock ) as variant
    Public Method EndOfFile() as logical
    Public Method NotEndOfFile() as logical
    Public Method TotalLines() as numeric

    // Métodos para manipulação e definição de filtros
    Public Method SetFilter( cFilter as character ) as logical
    Public Method ClearFilter()

    // Métodos para obtenção e manipulação de dados
    Public Method GetRecnoId() as variant
    Public Method GetValue( cFieldName as character, cToken as character ) as variant
    Public Method SetOperation( nOperation as numeric ) as logical
    Public Method SetValue( cFieldName as character, xValue as variant )
    Public Method CommitData()

    // Métodos de relacionamentos entre entidades
    Public Method SetRelation( oAttr as object ) as variant
    Public Method RefreshRelation() as logical // TODO: implementar melhoria para atualizar todos os relacionamentos existentes
    Public Method SelectRelation( cAliasJoin as character, cIndexJoin as character ) as logical
    Public Method RelationGetValue( cFieldName as character ) as variant

    // Métodos diversos
    Public Method GetOpenedStatus() as logical
    Public Method GetFieldPosition( cFieldName as character ) as numeric
    Public Method FieldExists( cFieldName as character ) as logical

    // Métodos internos da classe
    Private Method ValidDataSource( cDataSource as character ) as logical

EndClass

/*/{Protheus.doc} GwDataAccess::ValidDataSource( cDataSource as character ) as logical
Valida se a fonte de dados informada via argumento cDataSource condiz com o DataSource real do objeto da classe.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, sempre retorna 'true'.
@obs Este método é usado para determinar se outro método pode ou não ser executado, a dependnter da sua origem de dados.
     Por exemplo, uma query, não pode manipular dados com CommitData().
     Portanto, quando houver incompatibilidade entre o método executado e a origem de dados, a execução
     será interrompida via UserException().
/*/
Method ValidDataSource( cDataSource as character ) as logical Class GwDataAccess

    Default cDataSource := ""

    if !( ::cDataSource $ cDataSource )
        UserException("GwDataAccess:ValidDataSource - Acesso a método inválido para o DataSource " +'"'+ ::cDataSource +'"!')
    endif

Return .T.

/*/{Protheus.doc} GwDataAccess::New
Construtor da classe.
@type method
@version 12.2210.
@author Gworks - Giovani Soares
@since 05/03/2024
@param cAlias, character, Alias principal.
@return object, retorna instância da classe.
@obs Suporta:
            - Alias padrão, como SB1 (Cad. Produto);
            - Alias de consulta SQL usado com a função GetNextAlias();
            - Alias de dicionário, como SX3 (Descrição de Campos).
/*/
Method New( cAlias as character ) Class GwDataAccess

    Default cAlias := ""

    if Empty(cAlias)
        UserException("GwDataAccess:New - Argumento cAlias inválido ou não informado!")
    endif

    Self:oError := GwError():New()

    Self:cAlias := cAlias
    Self:aAliasArea := (cAlias)->(GetArea())
    Self:aInsert := {}
    Self:aUpdate := {}
    Self:aQuery := {}
    Self:aRelation := {}
    Self:aOtherAreas := {}
    Self:cOtherAreas := ""
    Self:nOperation := MODEL_OPERATION_VIEW
    Self:lAutoFilial := .T.
    Self:lFound := .F.
    Self:lRelation := .F.
    Self:lOpened := Select(cAlias) > 0

    Self:SelectArea()
    Self:SetDataSource()

    if Self:cDataSource == "SQL"
        Self:aQuery := GetLastQuery()
    endif

    if ::lOpened
        ::nIndexOrd := (cAlias)->(IndexOrd())
        ::cIndexKey := (cAlias)->(IndexKey(::nIndexOrd))
        ::nRecnoId  := (cAlias)->(Recno())
    endif

Return Self

/*/{Protheus.doc} GwDataAccess::GetErrorObject() as variant
Obtem o objeto de erro da classe.
@type method
@version 12.1.2210.
@author Gworks - Giovani Soares
@since 05/03/2024
@return object, Objeto de erro.
/*/
Method GetErrorObject() as variant Class GwDataAccess
Return ::oError

/*/{Protheus.doc} GwDataAccess::SetDataSource( cDataSource as character ) as variant
Define a Origem de Dados (DataSource) do alias princial do objeto.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@obs Pode-se forçar uma determinada fonte de dados ao informar o argumento cDataSource.
/*/
Method SetDataSource( cDataSource as character ) as variant Class GwDataAccess

    Default cDataSource := ""

    if Empty(cDataSource)

        do case

            // Tabela pertencente ao dicionário de dados SX2 de uso interno do ERP.
            case Len(::cAlias) == 3
                cDataSource := "SX2"

            // Tabela de dicionário de dados por exemplo, SX3, SIX, etc.
            case Len(::cAlias) == 6 .And. ( "DIC" $ ::cAlias )
                cDataSource := "DIC"

            // Demais tabelas, não pertencentes ao dicinário de dados do ERP.
            otherwise
                cDataSource := "SQL"

        endcase

    endif

    if !(cDataSource $ "SX2;DIC;SQL")
        UserException("GwDataAccess:SetDataSource - Argumento cDataSource inválido!")
    endif

    if cDataSource == "DIC"
        ::DisableAutoFilial()
    endif

    Self:cDataSource := cDataSource

Return

/*/{Protheus.doc} GwDataAccess::SelectArea() as variant
Abre o alias do objeto e o define como alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method SelectArea() as variant Class GwDataAccess
    DbSelectArea(Self:cAlias)
Return

/*/{Protheus.doc} GwDataAccess::SaveArea() as variant
Salva área do alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method SaveArea() as variant Class GwDataAccess

    Local cAlias := "" as character

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := Self:cAlias

    if !Empty(Self:aAliasArea)
        Self:EraseArea()
    endif

    Self:aAliasArea := (cAlias)->(GetArea())

Return

/*/{Protheus.doc} GwDataAccess::SaveOtherAreas( cNames as character ) as variant
Salva todas as áreas informadas no argumento cNames.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@obs O argumento cNames deve ser separado pelo token ";" em caso de múltiplas áreas.
/*/
Method SaveOtherAreas( cNames as character ) as variant Class GwDataAccess

    Local aAreas   := {} as array
    Local aNames   := {} as array
    Local cName    := "" as character
    Local cToken   := "" as character
    Local nI       := 0  as numeric

    Default cNames := ""

    if Empty(cNames)
        Return
    endif

    cToken := ";"

    aNames := if( at(cNames,cToken) > 0, StrToKarr(cNames,cToken), { cNames } )

    for nI:=1 to Len(aNames)

        cName := aNames[nI]

        aAdd( aAreas, (cName)->(GetArea()) )

    next

    Self:aOtherAreas := aClone(aAreas)
    Self:cOtherAreas := cNames

Return

/*/{Protheus.doc} GwDataAccess::RestoreArea() as variant
Restaura a área do alias atual conforme prévia execução do método SaveArea().
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method RestoreArea() as variant Class GwDataAccess

    Local cAlias := "" as character

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := ::cAlias

    RestArea(Self:aAliasArea)

    ::nIndexOrd := (cAlias)->(IndexOrd())
    ::cIndexKey := (cAlias)->(IndexKey(::nIndexOrd))
    ::nRecnoId  := (cAlias)->(Recno())

Return

/*/{Protheus.doc} GwDataAccess::RestoreOtherAreas( cNames as character ) as variant
Restaura todas as áreas contidas no argumento cNames.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@obs O argumento cNames deve ser separado pelo token ";" em caso de múltiplas áreas.
/*/
Method RestoreOtherAreas( cNames as character ) as variant Class GwDataAccess

    Local aAreas := {} as array
    Local aNames := {} as array
    Local cName  := "" as character
    Local cToken := "" as character
    Local nI     := 0  as numeric
    Local nJ     := 0  as numeric
    Local nPos   := 0  as numeric

    Default cNames := ""

    if Empty(cNames)
        cNames := Self:cOtherAreas
    endif

    cToken := ";"

    aNames := if( at(cNames,cToken) > 0, StrToKarr(cNames,cToken), { cNames } )

    For nI:=1 to Len(aNames)

        cName := aNames[nI]

        if !Empty(cName)
            nPos := aScan(Self:aOtherAreas, {|x| x[1]==cName})
        endif

        for nJ:=1 to Len(Self:aOtherAreas)

            if nPos > 0 .And. nJ != nPos
                loop
            endif

            aAreas := Self:aOtherAreas[nJ]

            RestArea(aAreas)

        next nJ

    next nI

Return

/*/{Protheus.doc} GwDataAccess::EraseOtherAreas() as variant
Apaga a área contida na propridade aAliasArea.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method EraseArea() as variant Class GwDataAccess
    FwFreeArray(Self:aAliasArea)
    Self:aAliasArea := {}
Return

/*/{Protheus.doc} GwDataAccess::EraseOtherAreas() as variant
Apaga todas as áreas contidas na propridade aOtherAreas.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method EraseOtherAreas() as variant Class GwDataAccess
    FwFreeArray(Self:aOtherAreas)
    Self:aOtherAreas := {}
Return

/*/{Protheus.doc} GwDataAccess::CloseArea() as variant
Encerra a área corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method CloseArea() as variant Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

    (cAlias)->(DbCloseArea())

Return

/*/{Protheus.doc} GwDataAccess::ReleaseArea() as variant
Método para restaurar ou fechar a área mediante atributo lOpened, onde:
    - lOpened igual à 'true', restaura a área para seu status original
    - lOpened igual à 'false', fecha a área.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@obs O atributo lOpened sinaliza se a área corrente estava aberta ou não
     no ato da instânciação do objeto.
/*/
Method ReleaseArea() as variant Class GwDataAccess

    Local cAlias := "" as character

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := Self:cAlias

    do case
        case  ::lOpened ; ::RestoreArea()
        case !::lOpened ; ::CloseArea()
    endcase

Return

/*/{Protheus.doc} GwDataAccess::SetOrder( xOrder as variant )  as variant
Define/redefine ordenação (índice) no alias corrente conforme argumento xOrder.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@obs xOrder pode ser informado
     conforme:
        - Ordem numérica corresponde ao índice desejável no dicionário SIX, exemplo: 1;
        - Ordem descritiva correspondente ao índice desejável no dicionário SIX, exemplo: "B1_FILIAL+B1_DESC".
/*/
Method SetOrder( xOrder as variant )  as variant Class GwDataAccess

    Local cAlias := "" as character

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := Self:cAlias

    ::nIndexOrd := 0
    ::cIndexKey := ""

    do case

        case ValType(xOrder) == 'N' ; (cAlias)->(DbSetOrder(xOrder))

        case ValType(xOrder) == 'C' ; (cAlias)->(DbSetOrder(RetOrder(,xOrder)))

        otherwise
            UserException("GwDataAccess:SetOrder - Argumento xOrder inválido!")

    endcase

    ::nIndexOrd := (cAlias)->(IndexOrd())
    ::cIndexKey := (cAlias)->(IndexKey(::nIndexOrd))

    (cAlias)->(DbGoTop())

Return

/*/{Protheus.doc} GwDataAccess::RetIndexOrder() as numeric
Retorna a ordem do índice do alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return numeric, retorna ordem do índice conforme dicionário SIX.
/*/
Method RetIndexOrder() as numeric Class GwDataAccess

    Local cAlias := "" as character
    Local nOrder := 0 as numeric

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := Self:cAlias

    nOrder := (cAlias)->(IndexOrd())

Return nOrder

/*/{Protheus.doc} GwDataAccess::GoTop() as variant
Posiciona no primeiro registro do alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method GoTop() as variant Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

    (cAlias)->(DbGoTop())

Return

/*/{Protheus.doc} GwDataAccess::GoBottom() as variant
Posiciona no último registro do alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method GoBottom() as variant Class GwDataAccess

    Local cAlias := "" as character

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := Self:cAlias

    (cAlias)->(DbGoBottom())

Return

/*/{Protheus.doc} GwDataAccess::GoToRecno( nRecno as numeric ) as logical
Posiciona no ID (campo R_E_C_N_O_) do alias corrente, conforme argumento nRecno informado.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, retorna 'true' para registro posicionado com sucesso e 'false' para falha na operação.
/*/
Method GoToRecno( nRecno as numeric ) as logical Class GwDataAccess

    Local cAlias  := ""  as character
    Local lResult := .F. as logical

    Default nRecno := 0

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    if nRecno > 0

        cAlias := Self:cAlias

        (cAlias)->(DbGoTo(nRecno))

        if (cAlias)->(Recno()) == nRecno
            lResult := .T.
        endif

    endif

Return lResult

/*/{Protheus.doc} GwDataAccess::SkipLine() as variant
Posiciona no próximo registro do alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method SkipLine() as variant Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

    (cAlias)->(DbSkip())

Return

/*/{Protheus.doc} GwDataAccess::EnableAutoFilial() as variant
Habilita a inserção automática da filial na busca de registros realizada pelo método Seek().
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method EnableAutoFilial() as variant Class GwDataAccess
    ::lAutoFilial := .T.
Return

/*/{Protheus.doc} GwDataAccess::DisableAutoFilial() as variant
Desabilita a inserção automática da filial na busca de registros realizada pelo método Seek().
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method DisableAutoFilial() as variant Class GwDataAccess
    ::lAutoFilial := .F.
Return

/*/{Protheus.doc} GwDataAccess::SeekStatus( cKey as character ) as logical
Avalia se o argumento cKey corresponde ao registro posicionado.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, retorna 'true' para chave correspondente e 'false' para chave não correspondente.
/*/
Method SeekStatus( cKey as character ) as logical Class GwDataAccess

    Local cAlias  := ""  as character
    Local lResult := .F. as logical

    Default cKey  := ""

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := ::cAlias

    if !Empty(cAlias) .And. Select(cAlias) > 0 .And. (cAlias)->(IndexOrd()) == ::nIndexOrd .And. !(cAlias)->(EOF())

        if !Empty(::cIndexKey) .And. !Empty(cKey)

            cKey := iif( ::lAutoFilial, xFilial(cAlias), "" ) + cKey

            lResult := ( (cAlias)->(::cIndexKey) == cKey )

        else

            lResult := .T.

        endif

    endif

Return lResult

/*/{Protheus.doc} GwDataAccess::Seek( cKey as character ) as logical
Realiza uma busca no alias corrente conforme conteúdo de cKey.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, retorna 'true' para busca encontrada e 'false' para busca não encontrada.
@obs Necessita de um índice definido pelo método SetOrder().
/*/
Method Seek( cKey as character ) as logical Class GwDataAccess

    Local cAlias  := ""  as character
    Local lResult := .F. as logical

    Default cKey := ""

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    if Empty(cKey)
        UserException("GwDataAccess:Seek - Parâmetro cKey não informado!")
    endif

    if Empty(::cIndexKey)
        UserException("GwDataAccess:Seek - Alias sem index definido!")
    endif

    cAlias := ::cAlias

    if ::SeekStatus(cKey)

        lResult := .T.

    else

        cKey := iif( ::lAutoFilial, xFilial(cAlias), "" ) + cKey

        (cAlias)->(DbGoTop())
        if (cAlias)->(MsSeek(cKey))

            lResult := .T.

        endif

    endif

    ::nRecnoId := 0
    ::lFound   := .F.
    if lResult
        ::nRecnoId := (cAlias)->(Recno())
        ::lFound   := .T.
        if !::RefreshRelation() // atualiza relacionamentos quando houver
            lResult := .F. // retorna .F. se não posicionar adequadamente no relacionamento
        endif
    endif

Return lResult

/*/{Protheus.doc} GwDataAccess::EvalByCondition( bExec as codeblock, bCondition as codeblock ) as variant
Executa uma expressão contida em bExec, avaliando a condição em bCondition para cada linha do alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method EvalByCondition( bExec as codeblock, bCondition as codeblock ) as variant Class GwDataAccess

    Local cAlias := "" as character

    Default bExec := {|| }
    Default bCondition := {|| }

    if !Empty(bExec) .And. !Empty(bCondition)

        cAlias := Self:cAlias

        (cAlias)->( DbEval( bExec, nil, bCondition, nil, nil, .T. ) )

    endif

    ::RestoreArea()

Return

/*/{Protheus.doc} GwDataAccess::EndOfFile() as logical
Avalia o estado de End Of File (EOF) do alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, retorna 'true' para indicar que está em EOF e 'false' para indicar que não está em EOF.
/*/
Method EndOfFile() as logical Class GwDataAccess
Return (Self:cAlias)->(EOF())

/*/{Protheus.doc} GwDataAccess::NotEndOfFile() as logical
Avalia o estado de End Of File (EOF) do alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, retorna 'true' para indicar que não está em EOF e 'false' para indicar que está em EOF.
/*/
Method NotEndOfFile() as logical Class GwDataAccess
Return !(Self:cAlias)->(EOF())

/*/{Protheus.doc} GwDataAccess::TotalLines() as numeric
Obtem o total de linhas de área corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return numeric, nTotal
/*/
Method TotalLines() as numeric Class GwDataAccess

    Local cAlias := "" as character
    Local nTotal := 0  as numeric

    cAlias := Self:cAlias
    nTotal := Contar(cAlias,"!EOF()")

    (cAlias)->(DbGoTop())

Return nTotal

/*/{Protheus.doc} GwDataAccess::SetFilter( cFilter as character ) as logical
Aplica a expressão de filtro contida em cFilter ao alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, retorna 'true' para sucesso e 'false' para falha na operação de filtragem.
/*/
Method SetFilter( cFilter as character ) as logical Class GwDataAccess

    Local lResult := .T.

    Local cFieldPrefix := "" as character
    Local cFieldFilial := "" as character

    Default cFilter := ""

    if Empty(cFilter)
        UserException("GwDataAccess:SetFilter - Argumento cFilter inválido ou não informado!")
    endif

    if ::lAutoFilial

        cFieldPrefix := if( at('S',::cAlias) == 1, Right(::cAlias,2), ::cAlias )

        cFieldFilial := cFieldPrefix + "_FILIAL"

        cFilter := cFieldFilial +" == '"+ xFilial(::cAlias) +"' .And. "+ cFilter // XX_FILIAL == '01'...

    endif

    (::cAlias)->(DbSetFilter( {|| &cFilter }, cFilter ))

    (::cAlias)->(DbGotop())

    if !(::cAlias)->(EOF())
        lResult := .T.
    endif

Return lResult

/*/{Protheus.doc} GwDataAccess::ClearFilter
Remove filtros aplicados ao alias corrente.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method ClearFilter() Class GwDataAccess

    (::cAlias)->(DbClearFilter())

    (::cAlias)->(DbGoTop())

Return

/*/{Protheus.doc} GwDataAccess::GetRecnoId
Retorna o ID de um registro conforme álias corrente no objeto.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return numeric, ID (campo R_E_C_N_O_) do registro.
/*/
Method GetRecnoId() Class GwDataAccess

    Local cAlias := "" as character

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := Self:cAlias

Return (cAlias)->(Recno())

/*/{Protheus.doc} GwDataAccess::GetValue( cFieldName as character, cToken as character ) as variant
Obtem o conteúdo do campo definido em cFieldName conforme o alias corrente do objeto.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return variant, retorna o conteúdo do campo.
@obs Suporta a passagem de vários campos em cFieldName, separados por um token (padrão ";").
     Neste caso, o conteúdo dos campos serão concatenados em uma string única e valores do tipo
     'date' e 'numeric' serão convertidos para 'character'.
/*/
Method GetValue( cFieldName as character, cToken as character ) as variant Class GwDataAccess

    Local nI             := 0   as numeric
    Local aFieldName     := {}  as array
    Local lMultipleNames := .F. as logical
    Local xValue         := nil as variant
    Local xResult        := nil as variant

    Default cFieldName := ""
    Default cToken     := ";"

    if !Empty(cFieldName)

        aFieldName := StrToKarr(cFieldName, cToken)

        if Len(aFieldName) > 1
            xResult := ""
            lMultipleNames := .T.
        endif

        for nI:=1 to Len(aFieldName)

            cFieldName := aFieldName[nI]

            xValue := (::cAlias)->&(cFieldName)

            if lMultipleNames

                do case
                    case ValType(xValue) == "N" ; xValue := cValToChar(xValue)
                    case ValType(xValue) == "D" ; xValue := dToS(xValue)
                endcase

                xResult += xValue

            else
                xResult := (::cAlias)->&(cFieldName)
            endif

        next

    endif

Return xResult

/*/{Protheus.doc} GwDataAccess::SetOperation( nOperation as numeric ) as logical
Define o modo de operação para manipulação de dados por meio dos métodos SetValue() e CommitData().
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, retorna 'true' para modo de operação válido e 'false' para modo de operação inválido.
@obs Os modos de operação disponíveis para uso,
     são:
        - MODEL_OPERATION_VIEW
        - MODEL_OPERATION_UPDATE
        - MODEL_OPERATION_INSERT
/*/
Method SetOperation( nOperation as numeric ) as logical Class GwDataAccess

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    do case

        case nOperation == MODEL_OPERATION_VIEW  ; ::nOperation := nOperation
        case nOperation == MODEL_OPERATION_UPDATE; ::nOperation := nOperation
        case nOperation == MODEL_OPERATION_INSERT; ::nOperation := nOperation
        case nOperation == MODEL_OPERATION_DELETE; ::nOperation := nOperation
        otherwise
            Return .F.

    endcase

Return .T.

/*/{Protheus.doc} GwDataAccess::SetValue( cFieldName as character, xValue as variant ) as variant
Define o valor de um campo a ser persistido na base de dados.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@param xParam, variant, Comportamento variável conforme: (1) nome do campo p/ inserção/atualização e (2) recno do registro para deleção.
@param xValue, variant, Assume o valor que deverá ser submetido para os modos de inserção e atualização, não usado no modo de deleção.
@obs Depende da execução do método CommitData() para efetivar a persistência na base de dados.
/*/
Method SetValue( xParam as variant, xValue as variant ) as variant Class GwDataAccess

    Default xValue := nil

    Local cAlias := "" as character
    Local cFieldName := "" as character
    Local nRecno := 0 as numeric

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := Self:cAlias

    do case // TODO: criar melhoria para atualizar o relacionamento quando houver...

        case ::nOperation == MODEL_OPERATION_INSERT
            if valtype(xParam) != 'C'
                UserException("GwDataAccess:SetValue - Argumento xParam não pode ser diferente de Character para a operação INSERT.")
            endif
            if valType(xValue) == 'U'
                UserException("GwDataAccess:SetValue - Argumento xValue não pode ser nulo para a operação INSERT.")
            endif
            cFieldName := xParam
            aAdd(::aInsert, { cFieldName, xValue } )

        case ::nOperation == MODEL_OPERATION_UPDATE
            if valtype(xParam) != 'C'
                UserException("GwDataAccess:SetValue - Argumento xParam não pode ser diferente de Character para a operação UPDATE.")
            endif
            if valType(xValue) == 'U'
                UserException("GwDataAccess:SetValue - Argumento xValue não pode ser nulo para a operação UPDATE.")
            endif
            cFieldName := xParam
            aAdd(::aUpdate, { cFieldName, xValue } )

        case ::nOperation == MODEL_OPERATION_DELETE
            nRecno := iif( valType(xParam) == 'N', xParam, (cAlias)->(Recno()) ) // obtem o recno de xParam (se informado) ou do registro posicionado
            aAdd(::aDelete, nRecno )

        otherwise
            UserException("GwDataAccess:SetValue - Modo de operação inválido para o método!")

    endcase

Return

/*/{Protheus.doc} GwDataAccess::CommitData
Persiste os dados no Banco de Dados conforme operação realizada via método SetValue().
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
/*/
Method CommitData() Class GwDataAccess

    Local aData as array
    Local nI as numeric
    Local cFieldName as character
    Local cAlias as character
    Local lDelete as logical
    Local xValue as variant

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    cAlias := Self:cAlias

    aData := {}

    lDelete := .F.

    BEGIN TRANSACTION

    do case

        case ::nOperation == MODEL_OPERATION_INSERT

            RecLock(cAlias, .T. )

            aData := aClone(Self:aInsert)

            Self:aInsert := {}

        case ::nOperation == MODEL_OPERATION_UPDATE

            RecLock(cAlias, .F. )

            aData := aClone(Self:aUpdate)

            Self:aUpdate := {}

        case ::nOperation == MODEL_OPERATION_DELETE

            aData := aClone(Self:aDelete)

            Self:aUpdate := {}

            lDelete := .T.

    endcase

    for nI:=1 to Len(aData)

        if!( lDelete )

            cFieldName := aData[nI,1]

            xValue := aData[nI,2]

            (cAlias)->&(cFieldName) := xValue

        else

            (cAlias)->(DbGoTo(aData[nI]))

            (cAlias)->(DbDelete())

        endif

    next

    if!( lDelete )
        (cAlias)->(MsUnLock())
    endif

    END TRANSACTION

    ::nOperation := 0

Return

/*/{Protheus.doc} GwDataAccess::SetRelation( oAttr as object,  ) as variant
Cria um novo relacionamento para a tabela principal na classe conforme definido por cAlias.
@type method
@version 12.1.33
@author Gworks - Giovani Soares
@since 09/03/2023
@return logical, .T. sucesso e .F. falha.
@example
    oAttr := GwKeyValue():New()
    oAttr:Add('AliasFrom','SC5')
    oAttr:Add('AliasJoin','SC6')
    oAttr:Add('IndexFrom','C5_FILIAL+C5_NUM')
    oAttr:Add('IndexJoinFK','C6_FILIAL+C6_NUM')
    oAttr:Add('IndexJoinPK','C6_FILIAL+C6_ITEM+C6_PRODUTO')
    oData:SetRelation():New(oAttr)
/*/
Method SetRelation( oAttr as object ) as variant Class GwDataAccess

    Local lResult   := .F. as logical
    Local oRelation := nil as object

    ::ValidDataSource(REQUIRE_DATASOURCE_RELATION)

    if !Empty(oAttr)

        ::cAliasFrom   := if( oAttr:HasName('AliasFrom'  ), oAttr:GetValueByKey('AliasFrom'  ), "" )
        ::cAliasJoin   := if( oAttr:HasName('AliasJoin'  ), oAttr:GetValueByKey('AliasJoin'  ), "" )
        ::cIndexFrom   := if( oAttr:HasName('IndexFrom'  ), oAttr:GetValueByKey('IndexFrom'  ), "" )
        ::cKeyFrom     := if( oAttr:HasName('KeyFrom'    ), oAttr:GetValueByKey('KeyFrom'    ), "" )
        ::cIndexJoinFK := if( oAttr:HasName('IndexJoinFK'), oAttr:GetValueByKey('IndexJoinFK'), "" )
        ::cIndexJoinPK := if( oAttr:HasName('IndexJoinPK'), oAttr:GetValueByKey('IndexJoinPK'), "" )

    endif

    if Empty(::cAliasFrom)
        ::cAliasFrom := ::cAlias
    endif

    oRelation := GwDataRelation():New()

    if  !Empty( ::cAliasFrom   ) .And.;
        !Empty( ::cAliasJoin   ) .And.;
        !Empty( ::cIndexFrom   ) .And.; // obs.: cIndexFrom opcional
        !Empty( ::cIndexJoinFK ) .And.;
        !Empty( ::cIndexJoinPK )

        oRelation:cAliasFrom   := ::cAliasFrom
        oRelation:cAliasJoin   := ::cAliasJoin
        oRelation:cIndexFrom   := ::cIndexFrom
        oRelation:cKeyFrom     := ::cKeyFrom
        oRelation:cIndexJoinFK := ::cIndexJoinFK
        oRelation:cIndexJoinPK := ::cIndexJoinPK

        if oRelation:Join()

            lResult := .T.

        else

            lResult := .F.

        endif

    endif

    ::oRelation := oRelation

    aAdd(::aRelation, ::oRelation)

    if !Self:lRelation
        Self:lRelation := .T.
    endif

Return lResult

/*/{Protheus.doc} GwDataAccess::RefreshRelation() as logical
Reposiciona o relacionamento conforme alias principal.
@type method
@version 12.1.33
@author Gworks - Giovani Soares
@since 3/23/2023
/*/
Method RefreshRelation() as logical Class GwDataAccess

    Local lResult := .F. as logical

    ::ValidDataSource(REQUIRE_DATASOURCE_RELATION)

    if !Empty(::oRelation) // TODO: melhoria para reposicionar todos os relacionamentos em aRelation

        lResult := ::oRelation:Join()

    else

        lResult := .T. // sempre retorna .T. quando não houver relacionamento

    endif

Return lResult

/*/{Protheus.doc} GwDataAccess::SelectRelation( cAliasJoin as character, cIndexJoin as character ) as logical
Considerando que podem haver vários relacionamentos com a entidade principal, seleciona e define como ativo
o relecionamento desejado conforme definido por cAliasJoin e cIndexJoin.
@type method
@version 12.1.33
@author Gworks - Giovani Soares
@since 10/03/2023
@param cAliasJoin, character, Alias do relacionamento desejado. Ex.: "SC6"
@param cIndexJoin, character, Índice do relacionamento desejado (opcional). Ex.: "C6_FILIAL+C6_NUM"
@return logical, .T. sucesso e .F. falha.
/*/
Method SelectRelation( cAliasJoin as character, cIndexJoin as character ) as logical Class GwDataAccess

    Local nI := 0 as numeric
    Local oRelation := nil as object

    Default cAliasJoin := ""
    Default cIndexJoin := ""

    ::ValidDataSource(REQUIRE_DATASOURCE_RELATION)

    for nI:=1 to Len(::aRelation)

        oRelation := aRelation[nI]
        if oRelation:cAliasJoin == cAliasJoin .And. ( Empty(cIndexJoin) .Or. !Empty(cIndexJoin) .And. oRelation:cIndexJoinFK == cIndexJoin )
            lResult := oRelation:Join()
            exit
        endif

    next

    if lResult
        ::oRelation := oRelation
    else
        FwFreeObj(::oRelation)
        ::oRelation := nil
    endif

Return lResult

/*/{Protheus.doc} GwDataAccess::RelationGetValue() as variant
Apenas retorna o conteúdo de um campo conforme tabela relacionada sem alterar seu posicionamento.
@type method
@version 12.1.33
@author Gworks - Giovani Soares
@since 10/03/2023
@return variant, conteúdo do campo.
/*/
Method RelationGetValue( cFieldName as character, cToken as character ) as variant Class GwDataAccess

    Local xResult as variant

    ::ValidDataSource(REQUIRE_DATASOURCE_RELATION)

    xResult := ::oRelation:GetValue( cFieldName, cToken )

Return xResult

/*/{Protheus.doc} GwDataAccess::GetOpenedStatus() as logical
Retorna o conteúdo da propriedade lOpened que sinaliza se a área
correspondente ao objeto da classe, estava ou não aberta no momento
da sua instânciação.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, Retorna 'true' para área aberta previamente e 'false' para área fechada previamente.
/*/
Method GetOpenedStatus() as logical Class GwDataAccess
Return ::lOpened

/*/{Protheus.doc} GwDataAccess::GetFieldPosition( cFieldName as character ) as numeric
Retorna a posição de um determinado campo informado via parâmetro conforme dicionário de dados SX3.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return numeric, Posição correspondente do campo no dicionário.
/*/
Method GetFieldPosition( cFieldName as character ) as numeric Class GwDataAccess

    Local nResult := 0 as numeric

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    ::SelectArea()

    nResult := FieldPos(cFieldName)

Return nResult

/*/{Protheus.doc} GwDataAccess::FieldExists( cFieldName as character ) as logical
Verifica se um campo correspondente ao alías do objeto, existe no dicnário de dados SX3.
@type method
@version 12.1.2210
@author Gworks - Giovani Soares
@since 05/03/2024
@return logical, retorna 'true' para campo existente e 'false' para inexistente.
/*/
Method FieldExists( cFieldName as character ) as logical Class GwDataAccess

    Local lResult := .F. as logical

    ::ValidDataSource(REQUIRE_DATASOURCE_DICTIONARY)

    if ::GetFieldPosition(cFieldName) > 0
        lResult := .T.
    endif

Return lResult
