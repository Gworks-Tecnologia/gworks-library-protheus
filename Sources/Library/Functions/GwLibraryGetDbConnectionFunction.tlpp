

#include "tlpp-core.th"

namespace Gworks.Library.Functions

/*/{Protheus.doc} GwGetDbConnection
Obtem os dados de conexão com o Banco de Dados a partir do arquivo de configuração do serviço em execução (appserver.ini).
@type function
@version 12.1.2310
@author Gworks - Giovani
@since 1/12/2025
@param jConnection, json, Retorna dados de conexão no seguinte formato:
    {
        "db_type" : "string",
        "db_name" : "string",
        "db_string" : "string",
        "db_server" : "string",
        "db_port" : "numeric"
    }
@param cEnvironment, character, Nome do Ambiente a ser considerado (opcional).
@return logical, Retorna .T. (true) para indicar sucesso e .F. (false) caso contrário.
@obs Observações:
    Se cEnvironment não for informado, será considerado o ambiente da
    thread em execução corrente, conforme resultado da função GetEnvServer().
/*/
User Function GwGetDbConnection( jConnection as json, cEnvironment as character  ) as logical

    default jConnection := nil
    default cEnvironment := GetEnvServer()

    Local cDbType := '' as character
    Local cDbAlias := '' as character
    Local cDbPort := '' as character
    Local cDbServer := '' as character
    Local cDBString := '' as character
    Local lResult as logical

    if valType(jConnection) == 'U'
        UserException("GetDbConnection - Parameter jConnection not provided!")
    endif

    jConnection := JsonObject():New()

    // Obtem, prioritariamente, a configuração de conexão
    // Definida na sessão Environment (ambiente).
    // Obs.: Considera o prefixo "DB" na chave de busca.
    cDbType   := iif( empty(cDbType)  , GetPvProfString( cEnvironment, "DbDataBase" , cDbType  , GetAdv97() ), cDbType   )
    cDbAlias  := iif( empty(cDbAlias) , GetPvProfString( cEnvironment, "DbAlias"    , cDbAlias , GetAdv97() ), cDbAlias  )
    cDbPort   := iif( empty(cDbPort)  , GetPvProfString( cEnvironment, "DbPort"     , cDbPort  , GetAdv97() ), cDbPort   )
    cDbServer := iif( empty(cDbServer), GetPvProfString( cEnvironment, "DbServer"   , cDbServer, GetAdv97() ), cDbServer )

    // Obtem, prioritariamente, a configuração de conexão
    // Definida na sessão Environment (ambiente).
    // Obs.: Considera o prefixo "TOP" na chave de busca.
    cDbType   := iif( empty(cDbType)  , GetPvProfString( cEnvironment, "TopDataBase", cDbType  , GetAdv97() ), cDbType   )
    cDbAlias  := iif( empty(cDbAlias) , GetPvProfString( cEnvironment, "TopAlias"   , cDbAlias , GetAdv97() ), cDbAlias  )
    cDbPort   := iif( empty(cDbPort)  , GetPvProfString( cEnvironment, "TopPort"    , cDbPort  , GetAdv97() ), cDbPort   )
    cDbServer := iif( empty(cDbServer), GetPvProfString( cEnvironment, "TopServer"  , cDbServer, GetAdv97() ), cDbServer )

    // Caso ainda não tenha conseguido obter os dados de conexão
    // Retorna as chaves definidas diretamente na sessão "DbAccess".
    cDbType   := iif( empty(cDbType)  , GetPvProfString( "DbAccess", "DataBase"     , cDbType  , GetAdv97() ), cDbType   )
    cDbAlias  := iif( empty(cDbAlias) , GetPvProfString( "DbAccess", "Alias"        , cDbAlias , GetAdv97() ), cDbAlias  )
    cDbPort   := iif( empty(cDbPort)  , GetPvProfString( "DbAccess", "Port"         , cDbPort  , GetAdv97() ), cDbPort   )
    cDbServer := iif( empty(cDbServer), GetPvProfString( "DbAccess", "Server"       , cDbServer, GetAdv97() ), cDbServer )

    // Monta string de conexão
    cDBString := cDbType+'/'+cDbAlias

    if !empty(cDbType) .and. !empty(cDbAlias) .and. !empty(cDbPort) .and. !empty(cDbServer)

        jConnection["db_type"] := cDbType
        jConnection["db_name"] := cDbAlias
        jConnection["db_string"] := cDBString
        jConnection["db_server"] := cDbServer
        jConnection["db_port"] := val(cDbPort)

        lResult := .T.

    else

        jConnection["db_type"] := ''
        jConnection["db_name"] := ''
        jConnection["db_string"] := ''
        jConnection["db_server"] := ''
        jConnection["db_port"] := 0

        lResult := .F.

    endif

Return lResult
