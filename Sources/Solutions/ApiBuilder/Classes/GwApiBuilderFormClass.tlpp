#include 'tlpp-core.th'
#include 'tlpp-rest.th'

using namespace Gworks.Library.Utils
using namespace Gworks.library.Functions
using namespace Gworks.Library.Classes

namespace Gworks.Solutions.ApiBuilder.Classes

/*/{Protheus.doc} GwApiBuilderFormClass
Classe construtora de API's.
@type class
@version 12.1.2310
@author Gworks - Giovani
@since 9/8/2024
/*/
Class GwApiBuilderFormClass

    Public Data cLanguage as character default "eng"
    Public Data nStatusCode as numeric default 400
    Public Data cMessage as character default ""
    Public Data cDetailedMessage as character default ""
    Public Data oStatusCode as object default nil
    Public Data jResponse as json

    Public Data oError as object default nil
    Public Data lInit as logical default .F.

    Public Method New() Constructor
    Public Method GetErrorObject()

    @Post("/builder/endpoint")
    Public Method BuiderEndpoint()

    Private Method Init()
    Private Method CreateEndPoint()

EndClass

Method Init() Class GwApiBuilderFormClass

    Self:oError := GwError():New()
    Self:oLog := GwConsoleLog():New()
    Self:oStatusCode := GwEnum():New()

    ::lInit := .T.

Return



Method GetResponse() Class GwApiBuilderFormClass()

    ::GetStatusCode()

    if ::nStatusCode == 200
        ::jResponse := JsonObject():New()
        ::jResponse['items'] := ::aResult
        ::jResponse['hasNext'] := ::lHasNext
        ::jResponse['_messages'] := ::ObterMensagens()
    else
        ::jResponse := ::ObterMensagens()
    endif


Return

Method SetStatusCode( _nStatusCode as numeric, _cMessage as character, _cDetailedMessage as character ) Class GwApiBuilderFormClass

    ::nStatusCode := _nStatusCode

    if !empty(_cMessage)
        ::cMessage := _cMessage
    endif

    if !empty(_cDetailedMessage)
        ::cDetailedMessage := _cDetailedMessage
    endif

Return

Method GetMessages() Class GwApiBuilderFormClass()

    Local aMessages as array
    Local cStatusCode as character
    Local cMessage as character
    Local cDetailedMessage as character
    Local jSuccess as json

    if empty(::cMessage) .or. empty(::cDetailedMessage)

        ::cLanguage := allTrim(lower(::cLanguage))

        do case

            case "eng" $ _cLanguage
                ::oStatusCode:SetEnum("Sucess", "The operation was successful!", 200)
                ::oStatusCode:SetEnum("Invalid operation", "Review the request parameters and body (if any) and try again!", 400)
                ::oStatusCode:SetEnum("Internal server error", "Please contact us at suporte@gworks.com.br.", 500)
                ::oStatusCode:SetEnum("Service unavailable", "Try agin in a few moments or contat us at suporte@gworks.com.br.", 503)

            case "pt" $ _cLanguage
                ::oStatusCode:SetEnum("Sucesso", "A operação foi um sucesso!", 200)
                ::oStatusCode:SetEnum("Operação inválida", "Revise os parânetros e o corpo (se houver) da requisição e tente novamente!", 400)
                ::oStatusCode:SetEnum("Erro interno do servidor", "Por favor nos acione em suporte@gworks.com.br.", 500)
                ::oStatusCode:SetEnum("Serviço inoperante", "Tente novamente em instantes ou nos acione em suporte@gworks.com.br.", 503)

            case "spa" $ _cLanguage
                ::oStatusCode:SetEnum("Éxito", "¡La operación fue un éxito!", 200)
                ::oStatusCode:SetEnum("Operación inválida", "¡Revise los parámetros y el cuerpo (si lo hay) de la solicitud y vuelva a intentarlo!", 400)
                ::oStatusCode:SetEnum("Error interno del servidor", "Por favor, contáctenos en soporte@gworks.com.br.", 500)
                ::oStatusCode:SetEnum("Servicio inoperante", "Intente nuevamente en unos momentos o contáctenos en soporte@gworks.com.br.", 503)

        endcase



    cStatusCode := cValToChar(::nStatusCode)
    ::cMessage := oStatusCode:GetEnum(::nStatusCode, 'name')
    ::cDetailedMessage := oStatusCode:GetEnum(::nStatusCode, 'description')
    if ::oError
        ::oError:cError := cStatusCode
        ::oError:cSuggestion := cDetailedMessage
        ::oError:cTitle := cMessage
    endif

    do case

        case cStatusCode == '200'
            jSuccess := {;
                "code": cStatusCode,;
                "message": cMessage,;
                "detailedMessage": cDetailedMessage,;
                "type": 'success',;
                "helpUrl": "";
            }
            aMessages := {}
            aAdd( aMessages, jSuccess )

            ::jResponse := aMessages

        case cStatusCode $ '400;500;503'
            jSuccess := {;
                "code": cStatusCode,;
                "message": cMessage,;
                "detailedMessage": cDetailedMessage;
            }

            ::jResponse := jSuccess

    endcase

Return ::oError::lError




Method sdasd() Class GwApiBuilderFormClass

    Local cParserError := ""

    ::oError:Clear()
    ::oLog:Clear()


    cParseError := ::jBody:FromJson( decodeUtf8(oRest:GetBodyRequest()) )


    ::oLog:SetMessage( 'Method PostOrder - Body: ' + ::jBody:toJson() )

    if!( empty(cParseError) )
        ::oError:cError := ""
        ::oError:cSuggestion :=
        ::oError:cTitle := ""
        ::oError:lError := .T.
    endif


Return

Method New() Class GwApiBuilderFormClass

    if !::lInit
        ::Init()
    endif

Return Self







Method GetErrorObject() as variant Class GwApiBuilderFormClass
Return ::oError


Method BuiderEndpointNew() Class GwApiBuilderFormClass

    Local nOpc := oPostEnum___:GetEnum('BuiderEndpointNew') as numeric

    ::CreateEndPoint( nOpc )

Return


Method CreateEndPoint( _nOpc as numeric ) Class GwApiBuilderFormClass

    Default nOpc := 0



Return lResult

